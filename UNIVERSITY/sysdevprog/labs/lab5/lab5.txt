System and Device Programming
Laboratory number 05 (System and Programming part)


Learning goals
--------------

C++ synchronization; File and file-system advanced I/O.


Exercise 01
C++ or C synch
--------------

Write a small C++ program for simulating the control of a bar to let cars enter
and exit a parking lot. 
For the sake of simulation, consider that a car:
- arrives every t1 random seconds (1<= t1 <= 3)
- leaves the parking lot every t2 random seconds (4<= t2 <=7).
If a car cannot enter because the parking lot is complete, it will just search
for parking somewhere else (hence, no queues will form in front of the bar
at the entrance). 

The following parameters can be initialized within the program:
-  Number of places in the parking lot;
-  Duration of the simulation (in seconds), computed starting from the first car
   that enters.

Use the following function to put a thread in the sleep status (e.g., for 1 second):
std::this_thread::sleep_for (std::chrono::seconds(1))

Write the code of the program and manage threads synchronization.
Make sure all threads finish running before the main program terminates.



Exercise 02 (Version A, B, and C)
UNIX IPC
---------------------------------

Two processes P1 and P2 want to exchange a message (more precisely a text) in both
directions, such that what is written by P1 is read by P2 and vice-versa.
P1 and P2 want to transfer the text between them using a piece of shared memory.
P1 and P2 synchronize their R/W operations using one or more pipes to read and
write the same chunk of shared memory.

More specifically, when P1 starts, it:
- Randomly generates a constant value n.
- Uses this value n as the size of the text to transfer to the process P1.
  - If n is zero, it stops, and forces P2 to stop too.
  - If n is not zero
    - P1 randomly generates a text including n small letters, spaces, and
      newlines.
    - P1 wakes up P2 using a pipe (e.g., it transfers on a pipe the
      text size n).
- Waits for P2.
- When P2 wakes it up, it displays the text generated by P1, converting
  all small letters into capital letters.
  No modifications have to be made to spaces and newlines.

P2 acts as P1, but it starts by waiting, and then it generates the text to
transfer to P1 (and, possibly, it uses another pipe).
The entire process must be repeated until either P1 or P2 generates a
message (text) of size zero.

Optional
--------
Version B: Use FIFOs instead of PIPEs.
Version C: Use Message Queues instead of PIPEs.



Exercise 03 (versions A, B, C, and D)
I/O: Blocking, non-blocking, multiplexed, asynchronous
------------------------------------------------------

A parent process P generates two children processes C1 and C2.
C1 and P communicate through a pipe p1, and C2 and P communicate
through a pipe p2.
- Process C1:
  every WAIT_TIME_1 second generates a string of STR_SIZE small alphabetic
  letters at most (i.e., from 1 to STR_SIZE letters) and writes the string
  into pipe p1.
  Overall, C1 generates and writes on pipe p1, STR_NUM strings of variable length.
- Process C2:
  does the same things done by C1, but it waits for WAIT_TIME_2
  seconds, and it writes the strings into pipe p2.
- Process P:
  reads the strings coming from the two pipes (p1 and p2), converts
  them in capital letters and displays them on standard output.

Note that:
- WAIT_TIME_1, WAIT_TIME_2, STR_NUM, and STR_SIZE are predefined
  (constant or user-defined) values.
- Strings are randomly generated (composed by only small alphabetic
  letters) of variable length.

Write four versions of the program:

A. Using blocking I/O system calls.
B. Using non-blocking I/O system calls.
C. Using multiplexing I/O.
D. Using asynchronous I/O.

Analyze and compare the outputs generated by the different versions of
the program.

Suggestion
----------

Processes C1 and C2 write strings of variable *length* on pipes p1 and
p2, respectively.
To let the parent process P read these strings "synchronously", it is
better to use the following simple communication protocol:
- C1 and C2, before writing the string onto the pipe, write its length,
  i.e., a single integer value.
- P reads the integer value n, and then it reads exactly n characters
  (thus, it synchronizes its reading operation with the writing operation
  on the other end of the pipe).
The alternative would be to read from the pipe character-by-character
until finding the termination character of each string ('\0').



Exercise 04
Memory-mapped I/O
-----------------

A binary file has the content specified by laboratory 01, exercise 01,
i.e.:

1 100000 Romano Antonio 25
2 150000 Fabrizi Aldo 22
3 200000 Verdi Giacomo 15
4 250000 Rossi Luigi 30

Write a C program that:
- Maps the file into memory.
- Runs two threads:
  - The first thread visits the records from the first to the last
    and increases the second field (the register number) by 1.
  - The second thread visits the records from the last to the first
    and decreases the last field (the mark) by 1.
  