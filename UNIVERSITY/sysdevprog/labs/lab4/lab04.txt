System and Device Programming
Laboratory number 04 (System and Programming part)



Learning goals
--------------

Multi/threading and synchronization.



Exercise 01 (Version A and B)
Concurrent file sorting and merging
-----------------------------------

A file stores integer values in binary format on 32 bits.
The first integer stored in the file indicates the number of values
following the first one.
For example, the following three lines specify (obviously in ASCII
format, to be user-readable) the content of three possible files
(that are stored in, or must be converted into binary format):

File 1: 5 23 45 67 9 23
File 2: 12 90 65 34 24 12 0 89 29 54 12 78 3
File 3: 3 9 5 1

Write an application that:

- Receives a variable number of strings, let us say n strings, on the
  command line.
  The first (n-1) strings are input file names.
  The last string is an output file name.
  Each input file has the format previously described.

- Runs one thread for each input file, passing to each of them one of
  the input file names.
  We will refer to these (n-1) working threads as "ordering" threads.

- After running all ordering threads, the main application awaits for
  the termination of all of them.

- When the main thread waits, each ordering thread:
  - opens "its own" input file
  - reads the first integer value
  - allocates a dynamic array of integers to store all other integers
    numbers stored in the file
  - read those numbers into the array
  - orders the array (in ascending order) using whatever ordering
    algorithm it is deemed appropriate
  - ends (returning the control to the main application thread).

- The main application thread, once collected the termination of all
  ordering threads, merges all ordered arrays into a unique array,
  i.e., a unique sequence of integers.

- It stores the final ordered array in the output file using the
  same (binary) format as the input files.

For the previous input files, the output file (again, in its ASCII
version) should be:
20 0 1 3 5 9 9 12 15 23 23 24 29 34 45 54 65 67 78 89 90


Version A: The main thread waits for the termination of all sorting
threads *before* merging their results.
Version B: The main thread starts merging ordered
sequences as soon as possible, i.e., every time one ordering thread
has done its job.

Observation
-----------

Is Version B faster than Version A?
How much faster is it?
To discover that, generate some large files (millions of values) and
run the program computing the elapsed times used by the process.
Use the library "time.h" and the system call "clock" to evaluate the time
(for more details, please search the WEB).



Exercise 02
Prefix sum
-----------

Given an array v of 2^n elements v[i], i.e.,

v = { v[0], v[1], ... , v[2^n − 1] }

its k-th prefix sum (the cumulative sum vector) is the sum of its first k+1
elements, i.e.,
v[0] + v[1] + ... + v[k]

Write a C program using Pthreads that:
* Receives an integer value n as an argument of the command line
* Randomly generates an array v of 2^n integer elements in the range [1-9]
* Computes the prefix sum of v as follows.

For an array v of 2^n elements, it is possible to compute all values of
the prefix sum in n steps, using 2^n−1 concurrent threads, each
associated with an array element.

For example, for n=3 and 2^3 = 8 elements, each step consists of each
thread taking two elements and computing a result:
* In the first step, each thread computes the sums of adjacent elements
  (i.e., gap = 1=2^0). 
* In the second step, each thread computes the sums of the elements
  that are two elements away (i.e., gap = 2 = 2^1).
* In the third step, each thread computes the sums of the elements
  that are four elements away (i.e., gap = 4 = 2^2).
After three steps, all sum prefix values are computed.

In general, if we have 2^n elements in v, step i computes the sums of
elements that are 2^(i-1) elements away.
After n steps, all cumulative sum values are computed.

For example, let us suppose the program is run as:

> cumulative_sum  3

It should compute (and eventually display) the following:

Initial array v:  2  4  6  1  3  5  8  7
v after step 1 :  2  6 10  7  4  8 13 15
                  Computed as: v[0]=v[0], v[1]=v[0]+v[1],
		               v[2]=v[1]+v[2], etc., v[n-1]=v[n-2]+v[n-1]
                               (sum of elements at a distance 2^0=1)
v after step 2 :  2  6 12 13 14 15 17 23
                  Computed as: v[0]=v[0], v[1]=v[1], v[2]=v[0]+v[2],
                               v[3]=v[1]+v[3], etc., v[n-1]=v[n-3]+v[n-1]
                               (sum of elements at a distance 2^1=2)
v after step 3 :  2  6 12 13 16 21 29 36
                  Computed as: v[0]=v[0], v[1]=v[1], v[2]=v[2], v[3]=v[4],
                               v[4]=v[0]+v[4], v[5]=v[1]+v[5], etc.,
                               v[n-1]=v[n-5]+v[n-1]
                               (sum of elements at a distance 2^2=4)
There is no step 4 as in step 4 the procedure should sum elements at a
distance 2^3=8 (which is the size of the array).

Notice that in the final array:
- v[7]=36 is the sum of elements v[0]+v[1]+...+v[7]
- v[6]=29 is the sum of elements v[0]+v[1]+...+v[6]
- v[5]=21 is the sum of elements v[0]+v[1]+...+v[5]
- etc.

Moreover, notice that:
1. The main thread allocates, fills, and prints the initial content of
   the array v
2. All threads are initially created by the main thread; they have all
   the same code, and they must synchronize their activity according to the
   procedure previously described, exploiting the maximum possible
   concurrency.
3. The array v must be updated in place, i.e., you cannot allocate
   auxiliary arrays.
4. Each thread must loop for no more than n times (the number of
   steps) before exiting.
5. Some threads terminate before the n-th step.
   In particular thread i terminates after step i, with i in the
   range [1–n].
6. The main thread immediately prints the value in v[0], then it waits
   the termination of each thread i, in order of creation, and
   immediately prints the value stored in v[i].

Suggestions
-----------
* Perform synchronization using barriers
* First, design and write the pseudo-code of a solution excluding rule 5.
* Then, update the solution, including rule 5.
  Please notice that:
  - If you refer to v[i-gap], index i-gap must be non-negative
  - You must properly manage a variable that stores the number of
    active threads, which must be decremented according to rule 5.






Exercise 03 (A and B)
Multiple matrix multiplications
-------------------------------

Implement a *sequential* program in C that:
- Takes a single argument n from the command line
- Generates two arrays (v1 and v2) of size n and a matrix (mat) of
  dimension (n x n), assigning to all elements random values.
  All random values must be in the range [-0.5, 0.5]
- Evaluates the following product
  res = v1^T * mat * v2
  (where v1^T is the transpose of v1).
  The computation must be performed in two steps, as the program must first
  compute
  v = v1^T * mat
  and then evaluate
  res = v * v2
- Prints the result res.

For example, let us suppose that n=5, and v1, v2 and mat are the
following ones:

v1^T = [ -0.0613 -0.1184  0.2655  0.2952 -0.3131 ] 

mat  = [ -0.3424 -0.3581  0.1557  0.2577  0.2060	
          0.4706 -0.0782 -0.4643  0.2431 -0.4682
          0.4572  0.4157  0.3491  0.1078 -0.2231	
         -0.0146  0.2922  0.4340 -0.1555 -0.4029
          0.3003  0.4595  0.1787 -0.3288 -0.4656 ]

v2^T = [ -0.3235  0.1948 -0.1829  0.4502 -0.4656 ]

Then, the result of the computation is:

res = v1^T * mat * v2 = (v1^T * mat) * v2 = -0.004680

After the sequential program correctly computes the final result,
transform it into two *concurrent* programs using Pthreads.

Organize the version A of the concurrent program as follows:

- The main thread creates the arrays, the matrix, and it runs n threads.
  Then, it waits for the termination of all n threads.
- Each thread performs the product of the array v1^T with i-th row
  of mat, which produces the i-th element of vector v.
- When all threads have terminated their task, the main thread compute
  the final result as
  res = v * v2

Organize the version B of the concurrent program as version A, but
once v has been computed, the final result (i.e., res = v * v2) is computed
by one of the created threads (not by the main threads).
Force the program to use the last thread which terminates the first
part of the task to compute the second part.



